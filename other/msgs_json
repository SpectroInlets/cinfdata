{"E0611": {"short_description": "No name %r in module %r", "codename": "no-name-in-module", "description": "Used when a name cannot be found in a module."}, "E1103": {"short_description": "%s %r has no %r member (but some types could not be inferred)", "codename": "maybe-no-member", "description": "Used when a variable is accessed for an unexistent member, but astroid was not able to interpret all possible types of this variable."}, "E1101": {"short_description": "%s %r has no %r member", "codename": "no-member", "description": "Used when a variable is accessed for an unexistent member."}, "C0103": {"short_description": "Invalid %s name \"%s\"", "codename": "invalid-name", "description": "Used when the name doesn't match the regular expression associated to its type (constant, variable, class...)."}, "C0102": {"short_description": "Black listed name \"%s\"", "codename": "blacklisted-name", "description": "Used when the name is listed in the black list (unauthorized names)."}, "W0201": {"short_description": "Attribute %r defined outside __init__", "codename": "attribute-defined-outside-init", "description": "Used when an instance attribute is defined outside the __init__ method."}, "E1102": {"short_description": "%s is not callable", "codename": "not-callable", "description": "Used when an object being called has been inferred to a non callable object"}, "W0614": {"short_description": "Unused import %s from wildcard import", "codename": "unused-wildcard-import", "description": "Used when an imported module or variable is not used from a 'from X import *' style import."}, "R0801": {"short_description": "Similar lines in %s files", "codename": "duplicate-code", "description": "Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication."}, "E0001": {"short_description": "", "codename": "syntax-error", "description": "Used when a syntax error is raised for a module."}, "W0631": {"short_description": "Using possibly undefined loop variable %r", "codename": "undefined-loop-variable", "description": "Used when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop."}, "W0603": {"short_description": "Using the global statement", "codename": "global-statement", "description": "Used when you use the \"global\" statement to update a global variable. PyLint just try to discourage this usage. That doesn't mean you can not use it !"}, "W0632": {"short_description": "Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s)", "codename": "unbalanced-tuple-unpacking", "description": "Used when there is an unbalanced tuple unpacking in assignment"}, "R0401": {"short_description": "Cyclic import (%s)", "codename": "cyclic-import", "description": "Used when a cyclic import between two or more modules is detected."}, "E0604": {"short_description": "Invalid object %r in __all__, must contain only strings", "codename": "invalid-all-object", "description": "Used when an invalid (non-string) object occurs in __all__."}, "E0602": {"short_description": "Undefined variable %r", "codename": "undefined-variable", "description": "Used when an undefined variable is accessed."}, "E0603": {"short_description": "Undefined variable name %r in __all__", "codename": "undefined-all-variable", "description": "Used when an undefined variable name is referenced in __all__."}, "E0601": {"short_description": "Using variable %r before assignment", "codename": "used-before-assignment", "description": "Used when a local variable is accessed before it's assignment."}, "C0111": {"short_description": "Missing %s docstring", "codename": "missing-docstring", "description": "Used when a module, function, class or method has no docstring. Some special methods like __init__ doesn't necessary require a docstring."}, "C0112": {"short_description": "Empty %s docstring", "codename": "empty-docstring", "description": "Used when a module, function, class or method has an empty docstring (it would be too easy ;)."}, "E0211": {"short_description": "Method has no argument", "codename": "no-method-argument", "description": "Used when a method which should have the bound instance as first argument has no argument defined."}, "E0213": {"short_description": "Method should have \"self\" as first argument", "codename": "no-self-argument", "description": "Used when a method has an attribute different the \"self\" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!"}, "W1001": {"short_description": "Use of \"property\" on an old style class", "codename": "property-on-old-class", "description": "Used when PyLint detect the use of the builtin \"property\" on an old style class while this is relying on new style classes features"}, "W0622": {"short_description": "Redefining built-in %r", "codename": "redefined-builtin", "description": "Used when a variable or function override a built-in."}, "W0623": {"short_description": "Redefining name %r from %s in exception handler", "codename": "redefine-in-handler", "description": "Used when an exception handler assigns the exception to an existing name"}, "W0101": {"short_description": "Unreachable code", "codename": "unreachable", "description": "Used when there is some code behind a \"return\" or \"raise\" statement, which will never be accessed."}, "W0621": {"short_description": "Redefining name %r from outer scope (line %s)", "codename": "redefined-outer-name", "description": "Used when a variable's name hide a name defined in the outer scope."}, "C0204": {"short_description": "Metaclass class method %s should have %s as first argument", "codename": "bad-mcs-classmethod-argument", "description": "Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to \"mcs\"), recommended to easily differentiate them from regular instance methods."}, "W0232": {"short_description": "Class has no __init__ method", "codename": "no-init", "description": "Used when a class has no __init__ method, neither its parent classes."}, "C0202": {"short_description": "Class method %s should have %s as first argument", "codename": "bad-classmethod-argument", "description": "Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods."}, "C0203": {"short_description": "Metaclass method %s should have %s as first argument", "codename": "bad-mcs-method-argument", "description": "Used when a metaclass method has a first agument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods."}, "E1124": {"short_description": "Parameter %r passed as both positional and keyword argument", "codename": "redundant-keyword-arg", "description": "Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument."}, "E1120": {"short_description": "No value passed for parameter %s in function call", "codename": "no-value-for-parameter", "description": "Used when a function call passes too few arguments."}, "E1121": {"short_description": "Too many positional arguments for function call", "codename": "too-many-function-args", "description": "Used when a function call passes too many positional arguments."}, "W0141": {"short_description": "Used builtin function %r", "codename": "bad-builtin", "description": "Used when a black listed builtin function is used (see the bad-function option). Usual black listed functions are the ones like map, or filter , where Python offers now some cleaner alternative like list comprehension."}, "E1123": {"short_description": "Passing unexpected keyword argument %r in function call", "codename": "unexpected-keyword-arg", "description": "Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names."}, "F0202": {"short_description": "Unable to check methods signature (%s / %s)", "codename": "method-check-failed", "description": "Used when PyLint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it."}, "I0022": {"short_description": "Deprecated pragma \"pylint:disable-msg\" or \"pylint:enable-msg\"", "codename": "deprecated-pragma", "description": "You should preferably use \"pylint:disable\" or \"pylint:enable\" instead of the deprecated suppression pragma style \"pylint:disable-msg\" or \"pylint:enable-msg\""}, "W0703": {"short_description": "Catching too general exception %s", "codename": "broad-except", "description": "Used when an except catches a too general exception, possibly burying unrelated errors."}, "I0020": {"short_description": "Suppressed %s (from line %d)", "codename": "suppressed-message", "description": "A message was triggered on a line, but suppressed explicitly by a disable= comment in the file. This message is not generated for messages that are ignored due to configuration settings."}, "I0021": {"short_description": "Useless suppression of %s", "codename": "useless-suppression", "description": "Reported when a message is explicitly disabled for a line or a block of code, but never triggered."}, "W0110": {"short_description": "map/filter on lambda could be replaced by comprehension", "codename": "deprecated-lambda", "description": "Used when a lambda is the first argument to \"map\" or \"filter\". It could be clearer as a list comprehension or generator expression. This message can't be emitted when using Python >= 3.0."}, "W0512": {"short_description": "Cannot decode using encoding \"%s\", unexpected byte at position %d", "codename": "invalid-encoded-data", "description": "Used when a source line cannot be decoded using the specified source file encoding. This message can't be emitted when using Python >= 3.0."}, "W0702": {"short_description": "No exception type(s) specified", "codename": "bare-except", "description": "Used when an except clause doesn't specify exceptions type to catch."}, "E0202": {"short_description": "An attribute affected in %s line %s hide this method", "codename": "method-hidden", "description": "Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code."}, "E0203": {"short_description": "Access to member %r before its definition line %s", "codename": "access-member-before-definition", "description": "Used when an instance member is accessed before it's actually assigned."}, "R0911": {"short_description": "Too many return statements (%s/%s)", "codename": "too-many-return-statements", "description": "Used when a function or method has too many return statement, making it hard to follow."}, "W0711": {"short_description": "Exception to catch is the result of a binary \"%s\" operation", "codename": "binary-op-exception", "description": "Used when the exception to catch is of the form \"except A or B:\". If intending to catch multiple, rewrite as \"except (A, B):\""}, "R0913": {"short_description": "Too many arguments (%s/%s)", "codename": "too-many-arguments", "description": "Used when a function or method takes too many arguments."}, "R0912": {"short_description": "Too many branches (%s/%s)", "codename": "too-many-branches", "description": "Used when a function or method has too many branches, making it hard to follow."}, "W0301": {"short_description": "Unnecessary semicolon", "codename": "unnecessary-semicolon", "description": "Used when a statement is ended by a semi-colon (\";\"), which isn't necessary (that's python, not C ;)."}, "W0121": {"short_description": "Use raise ErrorClass(args) instead of raise ErrorClass, args.", "codename": "old-raise-syntax", "description": "Used when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'. This message can't be emitted when using Python >= 3.0."}, "W0611": {"short_description": "Unused import %s", "codename": "unused-import", "description": "Used when an imported module or variable is not used."}, "W0120": {"short_description": "Else clause on loop without a break statement", "codename": "useless-else-on-loop", "description": "Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself."}, "E1205": {"short_description": "Too many arguments for logging format string", "codename": "logging-too-many-args", "description": "Used when a logging format string is given too few arguments."}, "F0220": {"short_description": "failed to resolve interfaces implemented by %s (%s)", "codename": "unresolved-interface", "description": "Used when a PyLint as failed to find interfaces implemented by a class"}, "W1300": {"short_description": "Format string dictionary key should be a string, not %s", "codename": "bad-format-string-key", "description": "Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings."}, "E0102": {"short_description": "%s already defined line %s", "codename": "function-redefined", "description": "Used when a function / class / method is redefined."}, "W0150": {"short_description": "%s statement in finally block may swallow exception", "codename": "lost-exception", "description": "Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised."}, "E0105": {"short_description": "Yield outside function", "codename": "yield-outside-function", "description": "Used when a \"yield\" statement is found outside a function or method."}, "E0104": {"short_description": "Return outside function", "codename": "return-outside-function", "description": "Used when a \"return\" statement is found outside a function or method."}, "I0013": {"short_description": "Ignoring entire file", "codename": "file-ignored", "description": "Used to inform that the file will not be checked"}, "I0012": {"short_description": "Locally enabling %s", "codename": "locally-enabled", "description": "Used when an inline option enables a message or a messages category."}, "I0011": {"short_description": "Locally disabling %s", "codename": "locally-disabled", "description": "Used when an inline option disables a message or a messages category."}, "I0010": {"short_description": "Unable to consider inline option %r", "codename": "bad-inline-option", "description": "Used when an inline option is either badly formatted or can't be used inside modules."}, "W0601": {"short_description": "Global variable %r undefined at the module level", "codename": "global-variable-undefined", "description": "Used when a variable is defined through the \"global\" statement but the variable is not defined in the module scope."}, "W0602": {"short_description": "Using global for %r but no assignment is done", "codename": "global-variable-not-assigned", "description": "Used when a variable is defined through the \"global\" statement but no assignment to this variable is done."}, "I0014": {"short_description": "Used deprecated directive \"pylint:disable-all\" or \"pylint:disable=all\"", "codename": "deprecated-disable-all", "description": "You should preferably use \"pylint:skip-file\" as this directive has a less confusing name. Do this only if you are sure that all people running Pylint on your code have version >= 0.26"}, "C1001": {"short_description": "Old-style class defined.", "codename": "old-style-class", "description": "Used when a class is defined that does not inherit from anotherclass and does not inherit explicitly from \"object\"."}, "F0003": {"short_description": "ignored builtin module %s", "codename": "ignored-builtin-module", "description": "Used to indicate that the user asked to analyze a builtin module which has been skipped."}, "F0002": {"short_description": "%s: %s", "codename": "astroid-error", "description": "Used when an unexpected error occurred while building the Astroid representation. This is usually accompanied by a traceback. Please report such errors !"}, "F0001": {"short_description": "", "codename": "fatal", "description": "Used when an error occurred preventing the analysis of a module (unable to find it for instance)."}, "R0902": {"short_description": "Too many instance attributes (%s/%s)", "codename": "too-many-instance-attributes", "description": "Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class."}, "R0903": {"short_description": "Too few public methods (%s/%s)", "codename": "too-few-public-methods", "description": "Used when class has too few public methods, so be sure it's really worth it."}, "W0105": {"short_description": "String statement has no effect", "codename": "pointless-string-statement", "description": "Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments."}, "F0004": {"short_description": "unexpected inferred value %s", "codename": "unexpected-inferred-value", "description": "Used to indicate that some value of an unexpected type has been inferred."}, "W0312": {"short_description": "Found indentation with %ss instead of %ss", "codename": "mixed-indentation", "description": "Used when there are some mixed tabs and spaces in a module."}, "E0235": {"short_description": "__exit__ must accept 3 arguments: type, value, traceback", "codename": "bad-context-manager", "description": "Used when the __exit__ special method, belonging to a context manager, does not accept 3 arguments (type, value, traceback)."}, "W0311": {"short_description": "Bad indentation. Found %s %s, expected %s", "codename": "bad-indentation", "description": "Used when an unexpected number of indentation's tabulations or spaces has been found."}, "R0201": {"short_description": "Method could be a function", "codename": "no-self-use", "description": "Used when a method doesn't use its bound instance, and so could be written as a function."}, "W1401": {"short_description": "Anomalous backslash in string: '%s'. String constant might be missing an r prefix.", "codename": "anomalous-backslash-in-string", "description": "Used when a backslash is in a literal string but not as an escape."}, "E1310": {"short_description": "Suspicious argument in %s.%s call", "codename": "bad-str-strip-call", "description": "The argument to a str.{l,r,}strip call contains a duplicate character,"}, "W0633": {"short_description": "Attempting to unpack a non-sequence%s", "codename": "unpacking-non-sequence", "description": "Used when something which is not a sequence is used in an unpack assignment"}, "C0304": {"short_description": "Final newline missing", "codename": "missing-final-newline", "description": "Used when the last line in a file is missing a newline."}, "C0301": {"short_description": "Line too long (%s/%s)", "codename": "line-too-long", "description": "Used when a line is longer than a given number of characters."}, "I0001": {"short_description": "Unable to run raw checkers on built-in module %s", "codename": "raw-checker-failed", "description": "Used to inform that a built-in module has not been checked using the raw checkers."}, "C0303": {"short_description": "Trailing whitespace", "codename": "trailing-whitespace", "description": "Used when there is whitespace between the end of a line and the newline."}, "C0302": {"short_description": "Too many lines in module (%s)", "codename": "too-many-lines", "description": "Used when a module has too much lines, reducing its readability."}, "W0406": {"short_description": "Module import itself", "codename": "import-self", "description": "Used when a module is importing itself."}, "W0404": {"short_description": "Reimport %r (imported line %s)", "codename": "reimported", "description": "Used when a module is reimported multiple times."}, "W0402": {"short_description": "Uses of a deprecated module %r", "codename": "deprecated-module", "description": "Used a module marked as deprecated is imported."}, "W0403": {"short_description": "Relative import %r, should be %r", "codename": "relative-import", "description": "Used when an import relative to the package directory is detected."}, "W0401": {"short_description": "Wildcard import %s", "codename": "wildcard-import", "description": "Used when `from module import *` is detected."}, "E0221": {"short_description": "Interface resolved to %s is not a class", "codename": "interface-is-not-class", "description": "Used when a class claims to implement an interface which is not a class."}, "E0222": {"short_description": "Missing method %r from %s interface", "codename": "missing-interface-method", "description": "Used when a method declared in an interface is missing from a class implementing this interface"}, "F0010": {"short_description": "error while code parsing: %s", "codename": "parse-error", "description": "Used when an exception occured while building the Astroid representation which could be handled by astroid."}, "W1402": {"short_description": "Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix.", "codename": "anomalous-unicode-escape-in-string", "description": "Used when an escape like \\u is encountered in a byte string where it has no effect."}, "E1004": {"short_description": "Missing argument to super()", "codename": "missing-super-argument", "description": "Used when the super builtin didn't receive an argument on Python 2 This message can't be emitted when using Python >= 3.0."}, "E1003": {"short_description": "Bad first argument %r given to super()", "codename": "bad-super-call", "description": "Used when another argument than the current class is given as first argument of the super builtin."}, "E1002": {"short_description": "Use of super on an old style class", "codename": "super-on-old-class", "description": "Used when an old style class uses the super builtin."}, "E1001": {"short_description": "Use of __slots__ on an old style class", "codename": "slots-on-old-class", "description": "Used when an old style class uses the __slots__ attribute."}, "R0904": {"short_description": "Too many public methods (%s/%s)", "codename": "too-many-public-methods", "description": "Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class."}, "W0142": {"short_description": "Used * or ** magic", "codename": "star-args", "description": "Used when a function or method is called using `*args` or `**kwargs` to dispatch arguments. This doesn't improve readability and should be used with care."}, "W0331": {"short_description": "Use of the <> operator", "codename": "old-ne-operator", "description": "Used when the deprecated \"<>\" operator is used instead of \"!=\"."}, "W0332": {"short_description": "Use of \"l\" as long integer identifier", "codename": "lowercase-l-suffix", "description": "Used when a lower case \"l\" is used to mark a long integer. You should use a upper case \"L\" since the letter \"l\" looks too much like the digit \"1\""}, "W0333": {"short_description": "Use of the `` operator", "codename": "backtick", "description": "Used when the deprecated \"``\" (backtick) operator is used instead of the str() function."}, "W1201": {"short_description": "Specify string format arguments as logging function parameters", "codename": "logging-not-lazy", "description": "Used when a logging statement has a call form of \"logging.<logging method>(format_string % (format_args...))\". Such calls should leave string interpolation to the logging method itself and be written \"logging.<logging method>(format_string, format_args...)\" so that the program may avoid incurring the cost of the interpolation in those cases in which no message will be logged. For more, see http://www.python.org/dev/peps/pep-0282/."}, "W0604": {"short_description": "Using the global statement at the module level", "codename": "global-at-module-level", "description": "Used when you use the \"global\" statement at the module level since it has no effect"}, "W0410": {"short_description": "__future__ import is not the first non docstring statement", "codename": "misplaced-future", "description": "Python 2.5 and greater require __future__ import to be the first non docstring statement in the module."}, "R0915": {"short_description": "Too many statements (%s/%s)", "codename": "too-many-statements", "description": "Used when a function or method has too many statements. You should then split it in smaller functions / methods."}, "W0231": {"short_description": "__init__ method from base class %r is not called", "codename": "super-init-not-called", "description": "Used when an ancestor class method has an __init__ method which is not called by a derived class."}, "W0704": {"short_description": "Except doesn't do anything", "codename": "pointless-except", "description": "Used when an except clause does nothing but \"pass\" and there is no \"else\" clause."}, "W0233": {"short_description": "__init__ method from a non direct base class %r is called", "codename": "non-parent-init-called", "description": "Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class."}, "R0901": {"short_description": "Too many ancestors (%s/%s)", "codename": "too-many-ancestors", "description": "Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class."}, "W0701": {"short_description": "Raising a string exception", "codename": "raising-string", "description": "Used when a string exception is raised."}, "R0921": {"short_description": "Abstract class not referenced", "codename": "abstract-class-not-used", "description": "Used when an abstract class is not used as ancestor anywhere."}, "R0922": {"short_description": "Abstract class is only referenced %s times", "codename": "abstract-class-little-used", "description": "Used when an abstract class is used less than X times as ancestor."}, "R0923": {"short_description": "Interface not implemented", "codename": "interface-not-implemented", "description": "Used when an interface class is not implemented anywhere."}, "E0012": {"short_description": "Bad option value %r", "codename": "bad-option-value", "description": "Used when a bad value for an inline option is encountered."}, "E0011": {"short_description": "Unrecognized file option %r", "codename": "unrecognized-inline-option", "description": "Used when an unknown inline option is encountered."}, "E0702": {"short_description": "Raising %s while only classes, instances or string are allowed", "codename": "raising-bad-type", "description": "Used when something which is neither a class, an instance or a string is raised (i.e. a `TypeError` will be raised)."}, "E0701": {"short_description": "Bad except clauses order (%s)", "codename": "bad-except-order", "description": "Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be catched by the most specific handler."}, "W1501": {"short_description": "\"%s\" is not a valid mode for open.", "codename": "bad-open-mode", "description": "Python supports: r, w, a modes with b, +, and U options. See http://docs.python.org/2/library/functions.html#open "}, "C0121": {"short_description": "Missing required attribute \"%s\"", "codename": "missing-module-attribute", "description": "Used when an attribute required for modules is missing."}, "W0234": {"short_description": "__iter__ returns non-iterator", "codename": "non-iterator-returned", "description": "Used when an __iter__ method returns something which is not an iterable (i.e. has no `next` method)"}, "W0109": {"short_description": "Duplicate key %r in dictionary", "codename": "duplicate-key", "description": "Used when a dictionary expression binds the same key multiple times."}, "W0108": {"short_description": "Lambda may not be necessary", "codename": "unnecessary-lambda", "description": "Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda."}, "W1111": {"short_description": "Assigning to function call which only returns None", "codename": "assignment-from-none", "description": "Used when an assignment is done on a function call but the inferred function returns nothing but None."}, "W0511": {"short_description": "", "codename": "fixme", "description": "Used when a warning note as FIXME or XXX is detected."}, "W0102": {"short_description": "Dangerous default value %s as argument", "codename": "dangerous-default-value", "description": "Used when a mutable value as list or dictionary is detected in a default value for an argument."}, "C0321": {"short_description": "More than one statement on a single line", "codename": "multiple-statements", "description": "Used when more than on statement are found on the same line."}, "W0107": {"short_description": "Unnecessary pass statement", "codename": "unnecessary-pass", "description": "Used when a \"pass\" statement that can be avoided is encountered."}, "C0326": {"short_description": "%s space %s %s %s", "codename": "bad-whitespace", "description": "Used when a wrong number of spaces is used around an operator, bracket or block opener."}, "C0325": {"short_description": "Unnecessary parens after %r keyword", "codename": "superfluous-parens", "description": "Used when a single item in parentheses follows an if, for, or other keyword."}, "W0104": {"short_description": "Statement seems to have no effect", "codename": "pointless-statement", "description": "Used when a statement doesn't have (or at least seems to) any effect."}, "W1301": {"short_description": "Unused key %r in format string dictionary", "codename": "unused-format-string-key", "description": "Used when a format string that uses named conversion specifiers is used with a dictionary that conWtains keys not required by the format string."}, "F0401": {"short_description": "Unable to import %s", "codename": "import-error", "description": "Used when pylint has been unable to import a module."}, "W0222": {"short_description": "Signature differs from %s method", "codename": "signature-differs", "description": "Used when a method signature is different than in the implemented interface or in an overridden method."}, "W0223": {"short_description": "Method %r is abstract in class %r but is not overridden", "codename": "abstract-method", "description": "Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class."}, "W0221": {"short_description": "Arguments number differs from %s method", "codename": "arguments-differ", "description": "Used when a method has a different number of arguments than in the implemented interface or in an overridden method."}, "W0712": {"short_description": "Implicit unpacking of exceptions is not supported in Python 3", "codename": "unpacking-in-except", "description": "Python3 will not allow implicit unpacking of exceptions in except clauses. See http://www.python.org/dev/peps/pep-3110/ This message can't be emitted when using Python >= 3.0."}, "W0710": {"short_description": "Exception doesn't inherit from standard \"Exception\" class", "codename": "nonstandard-exception", "description": "Used when a custom exception class is raised but doesn't inherit from the builtin \"Exception\" class."}, "W0106": {"short_description": "Expression \"%s\" is assigned to nothing", "codename": "expression-not-assigned", "description": "Used when an expression that is not a function call is assigned to nothing. Probably something else was intended."}, "E1304": {"short_description": "Missing key %r in format string dictionary", "codename": "missing-format-string-key", "description": "Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string."}, "E1305": {"short_description": "Too many arguments for format string", "codename": "too-many-format-args", "description": "Used when a format string that uses unnamed conversion specifiers is given too few arguments."}, "E1306": {"short_description": "Not enough arguments for format string", "codename": "too-few-format-args", "description": "Used when a format string that uses unnamed conversion specifiers is given too many arguments"}, "E1300": {"short_description": "Unsupported format character %r (%#02x) at index %d", "codename": "bad-format-character", "description": "Used when a unsupported format character is used in a format string."}, "E1301": {"short_description": "Format string ends in middle of conversion specifier", "codename": "truncated-format-string", "description": "Used when a format string terminates before the end of a conversion specifier."}, "E1302": {"short_description": "Mixing named and unnamed conversion specifiers in format string", "codename": "mixed-format-string", "description": "Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision."}, "E1303": {"short_description": "Expected mapping for format string, not %s", "codename": "format-needs-mapping", "description": "Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping."}, "E0710": {"short_description": "Raising a new style class which doesn't inherit from BaseException", "codename": "raising-non-exception", "description": "Used when a new style class which doesn't inherit from BaseException is raised."}, "E0711": {"short_description": "NotImplemented raised - should raise NotImplementedError", "codename": "notimplemented-raised", "description": "Used when NotImplemented is raised instead of NotImplementedError"}, "E0712": {"short_description": "Catching an exception which doesn't inherit from BaseException: %s", "codename": "catching-non-exception", "description": "Used when a class which doesn't inherit from BaseException is used as an exception in an except clause."}, "E0108": {"short_description": "Duplicate argument name %s in function definition", "codename": "duplicate-argument-name", "description": "Duplicate argument names in function definitions are syntax errors."}, "E1111": {"short_description": "Assigning to function call which doesn't return", "codename": "assignment-from-no-return", "description": "Used when an assignment is done on a function call but the inferred function doesn't return anything."}, "R0914": {"short_description": "Too many local variables (%s/%s)", "codename": "too-many-locals", "description": "Used when a function or method has too many local variables."}, "E0101": {"short_description": "Explicit return in __init__", "codename": "return-in-init", "description": "Used when the special class method __init__ has an explicit return value."}, "E0100": {"short_description": "__init__ method is a generator", "codename": "init-is-generator", "description": "Used when the special class method __init__ is turned into a generator by a yield in its body."}, "E0103": {"short_description": "%r not properly in loop", "codename": "not-in-loop", "description": "Used when break or continue keywords are used outside a loop."}, "E1206": {"short_description": "Not enough arguments for logging format string", "codename": "logging-too-few-args", "description": "Used when a logging format string is given too many arguments"}, "E1201": {"short_description": "Logging format string ends in middle of conversion specifier", "codename": "logging-format-truncated", "description": "Used when a logging statement format string terminates before the end of a conversion specifier."}, "E1200": {"short_description": "Unsupported logging format character %r (%#02x) at index %d", "codename": "logging-unsupported-format", "description": "Used when an unsupported format character is used in a logging statement format string."}, "E0107": {"short_description": "Use of the non-existent %s operator", "codename": "nonexistent-operator", "description": "Used when you attempt to use the C-style pre-increment orpre-decrement operator -- and ++, which doesn't exist in Python."}, "E0106": {"short_description": "Return with argument inside generator", "codename": "return-arg-in-generator", "description": "Used when a \"return\" statement with an argument is found outside in a generator function or method (e.g. with some \"yield\" statements)."}, "W0212": {"short_description": "Access to a protected member %s of a client class", "codename": "protected-access", "description": "Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined."}, "W0211": {"short_description": "Static method with %r as first argument", "codename": "bad-staticmethod-argument", "description": "Used when a static method has \"self\" or a value specified in valid-classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument."}, "W0122": {"short_description": "Use of exec", "codename": "exec-used", "description": "Used when you use the \"exec\" statement (function for Python 3), to discourage its usage. That doesn't mean you can not use it !"}, "W0199": {"short_description": "Assert called on a 2-uple. Did you mean 'assert x,y'?", "codename": "assert-on-tuple", "description": "A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is."}, "W0613": {"short_description": "Unused argument %r", "codename": "unused-argument", "description": "Used when a function or method argument is not used."}, "W0612": {"short_description": "Unused variable %r", "codename": "unused-variable", "description": "Used when a variable is defined but not used."}}
